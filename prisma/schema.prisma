generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Requirement {
  id                Int                @id @default(autoincrement())
  name              String?            @db.VarChar(255)
  incomeProfile     IncomeProfileEnum
  residenceType     ResidenceTypeEnum
  createdAt         DateTime           @default(now()) @db.DateTime(0)
  updatedAt         DateTime           @default(now()) @updatedAt
  lifeInsurance     Int                @default(0)
  preApprovalFee    Int                @default(0)
  processingFee     Int                @default(0)
  propertyInsurance Int                @default(0)
  rate              Int                @default(0)
  valuationFee      Int                @default(0)
  requiredDocuments RequiredDocument[] @relation("RequirementToRequiredDocuments")
}

model RequiredDocument {
  id            Int                           @id @default(autoincrement())
  name          String?                       @db.VarChar(255)
  documentType  DocumentTypeEnum
  isMandatory   Boolean                       @default(false)
  createdAt     DateTime                      @default(now()) @db.DateTime(0)
  updatedAt     DateTime                      @default(now()) @updatedAt
  requirementId Int
  requirement   Requirement                   @relation("RequirementToRequiredDocuments", fields: [requirementId], references: [id], onDelete: Cascade)

  @@index([requirementId], map: "RequiredDocument_requirementId_fkey")
}

model Document {
  id         Int              @id @default(autoincrement())
  createdAt  DateTime         @default(now()) @db.DateTime(0)
  updatedAt  DateTime         @updatedAt
  mortgageId Int?
  propertyId Int?
  type       DocumentTypeEnum
  url        String           @unique(map: "url") @db.VarChar(255)
  agentId    Int?
  Agent      Agent?           @relation(fields: [agentId], references: [id])
  mortgage   Mortgage?        @relation(fields: [mortgageId], references: [id])
  property   Property?        @relation(fields: [propertyId], references: [id])

  @@index([agentId], map: "Document_agentId_fkey")
  @@index([mortgageId], map: "Document_mortgageId_fkey")
  @@index([propertyId], map: "Document_propertyId_fkey")
}

model Reference {
  id           Int       @id @default(autoincrement())
  title        String?   @db.VarChar(255)
  name         String    @db.VarChar(255)
  email        String?   @db.VarChar(255)
  phone        String    @db.VarChar(255)
  relationship String    @db.VarChar(255)
  createdAt    DateTime  @default(now()) @db.DateTime(0)
  updatedAt    DateTime  @default(now()) @updatedAt
  mortgageId   Int?
  mortgage     Mortgage? @relation(fields: [mortgageId], references: [id])

  @@index([mortgageId], map: "Reference_mortgageId_fkey")
}

model Mortgage {
  id                  Int                   @id @default(autoincrement())
  firstName           String                @db.VarChar(255)
  lastName            String                @db.VarChar(255)
  email               String                @db.VarChar(255)
  phoneNumber         String?               @db.VarChar(255)
  dateOfBirth         DateTime              @db.DateTime(0)
  intendedProperty    String                @db.VarChar(255)
  monthlyIncome       Float
  createdAt           DateTime              @default(now()) @db.DateTime(0)
  updatedAt           DateTime              @updatedAt
  country             String?               @default("") @db.VarChar(255)
  status              MortgageStatusEnum
  residenceType       ResidenceTypeEnum
  incomeProfile       IncomeProfileEnum
  loanType            LoanTypeEnum
  userId              Int?
  valueOfProperty     Float                 @default(0)
  additionalDetail    String?               @db.VarChar(255)
  completionStatus    CompletionStatusEnum?
  customerInformation String?               @db.VarChar(255)
  emirate             EmirateEnum?
  financeType         FinanceTypeEnum?
  propertyType        PropertyTypeEnum?
  familyMembersInUae  Int?                  @default(0)
  favoriteCity        String?               @db.VarChar(255)
  homeCountryAddress  String?               @db.VarChar(255)
  maritalStatus       MaritalStatusEnum?
  uaeResidenceAddress String?               @db.VarChar(255)
  yearsInUae          Int?                  @default(0)
  educationType       EducationTypeEnum?
  annualRentalIncome  Int?                  @default(0)
  deleted             Boolean               @default(false)
  comments            Comment[]
  documents           Document[]
  history             History[]
  user                User?                 @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "mortgage_userId_foreign_idx")
  references          Reference[]

  @@index([userId], map: "Mortgages_userId_foreign_idx")
}

model History {
  id          Int             @id @default(autoincrement())
  title       String          @db.VarChar(255)
  description String          @db.Text
  mortgageId  Int?
  userId      Int?
  createdAt   DateTime        @default(now()) @db.DateTime(0)
  updatedAt   DateTime        @default(now()) @updatedAt
  type        HistoryTypeEnum
  mortgage    Mortgage?       @relation(fields: [mortgageId], references: [id])
  user        User?           @relation(fields: [userId], references: [id])

  @@index([mortgageId], map: "History_mortgageId_fkey")
  @@index([userId], map: "History_userId_fkey")
}

model Comment {
  id          Int      @id @default(autoincrement())
  userId      Int
  mortgageId  Int
  message     String   @db.Text
  createdAt   DateTime @default(now()) @db.DateTime(0)
  updatedAt   DateTime @default(now()) @updatedAt
  title       String   @db.VarChar(255)
  user        User     @relation(fields: [userId], references: [id])
  mortgage    Mortgage @relation(fields: [mortgageId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "MortgageComments_ibfk_2")
  attachments File[]

  @@index([mortgageId], map: "mortgageId")
  @@index([userId], map: "userId")
}

model User {
  id                 Int          @id @default(autoincrement())
  firstName          String       @db.VarChar(255)
  lastName           String       @db.VarChar(255)
  email              String       @unique(map: "email") @db.VarChar(255)
  password           String       @db.VarChar(255)
  createdAt          DateTime     @default(now()) @db.DateTime(0)
  updatedAt          DateTime     @updatedAt
  role               UserRoleEnum @default(GENERAL_USER)
  isEmailConfirmed   Boolean?
  agentId            Int?
  authId             String       @unique(map: "authId") @db.VarChar(255)
  passwordResetToken String       @default("") @db.VarChar(255)
  agent              Agent?
  comments           Comment[]
  history            History[]
  mortgages          Mortgage[]
  properties         Property[]
}

model Location {
  id         Int         @id @default(autoincrement())
  name       String?     @unique(map: "name") @db.VarChar(255)
  createdAt  DateTime    @default(now()) @db.DateTime(0)
  updatedAt  DateTime    @updatedAt
  emirate    EmirateEnum
  properties Property[]
  agents     Agent[]     @relation("AgentToLocation")
}

model Amenity {
  id         Int              @id @default(autoincrement())
  name       String?          @unique(map: "name") @db.VarChar(255)
  createdAt  DateTime         @default(now()) @db.DateTime(0)
  updatedAt  DateTime         @default(now()) @updatedAt
  type       AmenityTypeEnum?
  propertyId Int?
  property   Property?        @relation(fields: [propertyId], references: [id])

  @@index([propertyId], map: "Amenity_propertyId_fkey")
}

model File {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(255)
  path       String    @unique(map: "path") @db.VarChar(255)
  createdAt  DateTime  @default(now()) @db.DateTime(0)
  updatedAt  DateTime  @updatedAt
  propertyId Int?
  commentId  Int?
  Comment    Comment?  @relation(fields: [commentId], references: [id])
  property   Property? @relation(fields: [propertyId], references: [id])

  @@index([propertyId], map: "propertyId")
  @@index([commentId], map: "File_commentId_fkey")
}

model Property {
  id                   Int                   @id @default(autoincrement())
  name                 String                @db.VarChar(255)
  description          String?               @db.Text
  phone                String                @db.VarChar(255)
  amount               Float?
  size                 Float?
  numberOfBedRooms     Int?
  numberOfBathRooms    Int?
  maintenanceFee       Float?
  address              String?               @db.VarChar(255)
  landmark             String?               @db.Text
  completionStatus     PropertyCompletionStatusEnum @default(OFF_PLAN_PRIMARY)
  layoutType           String? @db.VarChar(255)
  serviceCharges       String? @db.VarChar(255)
  createdAt            DateTime?             @default(now()) @db.DateTime(0)
  updatedAt            DateTime?             @updatedAt
  minimumContract      Float?
  deedNumber           String?               @db.VarChar(255)
  unitNumber           Int?
  buildingName         String?               @db.VarChar(255)
  floor                Int?
  isApproved           Boolean?
  userId               Int?
  draft                String?               @db.Text
  paymentInterval      String?               @db.VarChar(255)
  numberOfCheques      Int?
  completionDate       DateTime?             @db.DateTime(0)
  numberOfLavatory     Int?
  rentalAmount         Float?
  trakheesiPermitNo    String?               @default("") @db.VarChar(255)
  lat                  Float?                @db.Float
  lng                  Float?                @db.Float
  agentId              Int?
  emirate              EmirateEnum?
  projectStatus        ProjectStatusEnum?
  propertyType         PropertyTypeEnum?
  propertyCategory     PropertyCategoryEnum?
  holdingType          HoldingTypeEnum?      @default(FREE_HOLD)
  propertyFor          PropertyForEnum?      @default(SALE)
  occupencyStatus      OccupencyStatusEnum?
  airportDistance      Int?
  callPreference       String?               @db.VarChar(255)
  image                String?               @db.VarChar(255)
  nearbyPlaces         String?               @db.VarChar(255)
  otherFeatures        String?               @db.Text
  parkingSpaces        Int?
  street               String?               @db.VarChar(255)
  submissionStatus     SubmissionStatusEnum? @default(SUBMITTED)
  metroStationDistance Int?
  furnishingStatus     FurnishingStatusEnum? @default(UNFURNISHED)
  noticePeriodProperty Int?
  noticePeriodRent     Int?
  email                String                @default("") @db.VarChar(255)
  locationId           Int?
  deleted              Boolean               @default(false)
  amenities            Amenity[]
  documents            Document[]
  photos               File[]
  user                 User?                 @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Properties_userId_foreign_idx")
  agent                Agent?                @relation(fields: [agentId], references: [id])
  location             Location?             @relation(fields: [locationId], references: [id])

  @@index([userId], map: "Properties_userId_foreign_idx")
  @@index([agentId], map: "Property_agentId_fkey")
  @@index([locationId], map: "Property_locationId_fkey")
}

model Agent {
  id             Int                @id @default(autoincrement())
  userId         Int                @unique
  agency         String?            @db.VarChar(255)
  contactNumber  String?            @db.VarChar(255)
  createdAt      DateTime?          @default(now()) @db.DateTime(0)
  updatedAt      DateTime?          @updatedAt
  activeStatus   ActiveStatusEnum   @default(ACTIVE)
  approvalStatus ApprovalStatusEnum @default(NOT_APPROVED)
  user           User               @relation(fields: [userId], references: [id])
  documents      Document[]
  properties     Property[]
  locations      Location[]         @relation("AgentToLocation")

  @@index([userId], map: "userId")
}

model Inqueries {
  id        Int      @id @default(autoincrement())
  firstName String   @db.VarChar(255)
  lastName  String   @db.VarChar(255)
  budget    Int
  website   String   @db.VarChar(255)
  message   String   @db.Text
  createdAt DateTime @db.DateTime(0)
  updatedAt DateTime @db.DateTime(0)
}

enum HistoryTypeEnum {
  MORTGAGE
  PROPERTY
  COMMENT
}

enum SubmissionStatusEnum {
  SUBMITTED
  UNDER_VERIFICATION
  APPROVED
  REJECTED
}

enum FurnishingStatusEnum {
  FULLY_FURNISHED
  SEMI_FURNISHED
  UNFURNISHED
}

enum ApprovalStatusEnum {
  APPROVED
  NOT_APPROVED
}

enum ActiveStatusEnum {
  ACTIVE
  INACTIVE
}

enum MaritalStatusEnum {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
}

enum EducationTypeEnum {
  ELEMENTARY_SCHOOL
  MIDDLE_SCHOOL
  HIGH_SCHOOL
  COLLEGE
  VOCATIONAL_SCHOOL
  GRADUATE_SCHOOL
  ONLINE_COURSES
  PROFESSIONAL_DEVELOPMENT
  HOMESCHOOLING
  LIFELONG_LEARNING
  SPECIALIZED_TRAINING_PROGRAMS
  LANGUAGE_COURSES
  CERTIFICATE_PROGRAMS
  TRADE_SCHOOLS
}

enum IncomeProfileEnum {
  SALARIED
  SELF_EMPLOYED
  RENTAL_INCOME
}

enum ResidenceTypeEnum {
  UAE_NATIONAL
  UAE_RESIDENT
  NON_UAE_RESIDENT
}

enum DocumentTypeEnum {
  PASSPORT_COPY
  VISA_COPY
  EMIRATES_ID
  BANK_STATEMENT_6_MONTHS
  BANK_STATEMENT_1_YEAR
  SALARY_CERTIFICATE
  TRADE_LICENSE
  MEMORANDUM_WITH_AMENDMENTS
  VAT_CERTIFICATE_RETURN_RECEIPTS
  OFFICE_TENANCY_CONTRACT_UTILITY_BILL
  COMPANY_PROFILE_WEBSITE
  TITLE_DEED_COPY
  TENANCY_CONTRACT_COPY
  RENTAL_CHEQUE_COPY
  BANK_STATEMENT_3_MONTHS_EQUIVALENT_AED_25000
  PROOF_OF_RESIDENCE
  PROOF_OF_INCOME
  COMPANY_BANK_STATEMENT_6_MONTHS
  OWNERSHIP_PROOF_MOBILE_NUMBER
  MOBILE_BILL_COPY
  REAL_ESTATE_LICENSE
}

enum AmenityTypeEnum {
  PROPERTY
  BUILDING
  COMMUNITY
}

enum HoldingTypeEnum {
  FREE_HOLD
  LEASE_HOLD
}

enum PropertyCompletionStatusEnum {
  READY_SECONDARY
  OFF_PLAN_SECONDARY
  READY_PRIMARY
  OFF_PLAN_PRIMARY
}

enum UserRoleEnum {
  SUPER_ADMIN
  ADMIN
  GENERAL_USER
  AGENT
}

enum CompletionStatusEnum {
  COMPLETED
  UNDER_CONSTRUCTION
}

enum FinanceTypeEnum {
  ISLAMIC
  CONVENTIONAL
}

enum MortgageStatusEnum {
  SUBMITTED
  UNDER_DOCUMENTATION_STAGE
  SUBMITTED_TO_BANK
  APPROVED
  VALUATION_STAGE
  FINAL_OFFER_LETTER
  CASE_DISBURSED
  PROPERTY_TRANSFER
  TRANSACTION_COMPLETED
  CASE_CLOSED
  CASE_DECLINED
}

enum LoanTypeEnum {
  BUY_PROPERTY_FROM_SELLER
  BUY_PROPERTY_FROM_DEVELOPER
  SHIFT_PROPERTY_LOAN
  GET_CASH_AGAINST_EXISTING_PROPERTY
}

enum PropertyForEnum {
  SALE
  RENT
}

enum ProjectStatusEnum {
  OFF_PLAN_UNDER_CONSTRUCTION
  SHELL_AND_CORE
  COMPLETED
}

enum OccupencyStatusEnum {
  VACANT
  OCCUPIED
}

enum PropertyTypeEnum {
  RESIDENTIAL
  COMMERCIAL
}

enum PropertyCategoryEnum {
  APARTMENT_AND_UNIT
  APARTMENT
  VILLA
  DUPLEX
  PENTHOUSE
  ACREAGE
  RESIDENTIAL_LAND
  VILLA_COMPOUND
  BLOCK_OF_UNITS
  RESIDENTIAL_FULL_BUILDING
  BUNGALOW
  BULK_UNITS
  HOUSE
  TOWNHOUSE
  LAND
  BULK_UNIT
  COMMERCIAL_BUILDING
  COMMERCIAL_FLOOR
  COMMERCIAL_VILLA
  COMMERCIAL_PLOT
  FACTORY
  INDUSTRIAL_UNIT_FOR_SALE
  INDUSTRIAL_LAND
  MIXED_USED_SAND
  OFFICE_FOR_SALE
  RETAIL_FOR_SALE
  SHOP
  STAFF_ACCOMMODATION_FOR_SALE
  WAREHOUSE
  SELL_COMMERCIAL_LAND
  OTHER
}

enum EmirateEnum {
  DUBAI
  ABU_DHABI
  RAS_AL_KHAIMAH
  SHARJAH
  FUJAIRAH
  AJMAN
  UMM_AL_QUWAIN
}

enum RequiredDocument_documentType {
  PASSPORT_COPY
  VISA_COPY
  EMIRATES_ID
  BANK_STATEMENT_6_MONTHS
  BANK_STATEMENT_1_YEAR
  SALARY_CERTIFICATE
  TRADE_LICENSE
  MEMORANDUM_WITH_AMENDMENTS
  VAT_CERTIFICATE_RETURN_RECEIPTS
  OFFICE_TENANCY_CONTRACT_UTILITY_BILL
  COMPANY_PROFILE_WEBSITE
  TITLE_DEED_COPY
  TENANCY_CONTRACT_COPY
  RENTAL_CHEQUE_COPY
  BANK_STATEMENT_3_MONTHS_EQUIVALENT_AED_25000
  PROOF_OF_RESIDENCE
  PROOF_OF_INCOME
  COMPANY_BANK_STATEMENT_6_MONTHS
  OWNERSHIP_PROOF_MOBILE_NUMBER
  REAL_ESTATE_LICENSE
}
