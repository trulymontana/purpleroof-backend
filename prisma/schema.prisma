generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum IncomeProfileEnum {
  SALARIED
  SELF_EMPLOYED
  RENTAL_INCOME
}

enum ResidenceTypeEnum {
  UAE_NATIONAL
  UAE_RESIDENT
  NON_UAE_RESIDENT
}

enum DocumentTypeEnum {
  PASSPORT_COPY
  VISA_COPY
  EMIRATES_ID
  BANK_STATEMENT_6_MONTHS
  BANK_STATEMENT_1_YEAR
  SALARY_CERTIFICATE
  TRADE_LICENSE
  MEMORANDUM_WITH_AMENDMENTS
  VAT_CERTIFICATE_RETURN_RECEIPTS
  OFFICE_TENANCY_CONTRACT_UTILITY_BILL
  COMPANY_PROFILE_WEBSITE
  TITLE_DEED_COPY
  TENANCY_CONTRACT_COPY
  RENTAL_CHEQUE_COPY
  BANK_STATEMENT_3_MONTHS_EQUIVALENT_AED_25000
  PROOF_OF_RESIDENCE
  PROOF_OF_INCOME
  COMPANY_BANK_STATEMENT_6_MONTHS
  OWNERSHIP_PROOF_MOBILE_NUMBER
}

model Requirement {
  id            Int               @id @default(autoincrement())
  name          String?           @db.VarChar(255)
  incomeProfile IncomeProfileEnum
  residenceType ResidenceTypeEnum

  preApprovalFee    Int? @db.Int
  processingFee     Int? @db.Int
  rate              Int? @db.Int
  lifeInsurance     Int? @db.Int
  propertyInsurance Int? @db.Int
  valuationFee      Int? @db.Int

  requiredDocuments RequiredDocument[] @relation("RequirementToRequiredDocuments")

  createdAt DateTime @default(now()) @db.DateTime(0)
  updatedAt DateTime @updatedAt
}

model RequiredDocument {
  id            Int              @id @default(autoincrement())
  name          String?          @db.VarChar(255)
  documentType  DocumentTypeEnum
  isMandatory   Boolean          @default(false)
  createdAt     DateTime         @default(now()) @db.DateTime(0)
  updatedAt     DateTime         @updatedAt
  requirement   Requirement      @relation("RequirementToRequiredDocuments", onDelete: Cascade, fields: [requirementId], references: [id])
  requirementId Int
}

model Document {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(155)
  documentTypeId Int
  documentType   DocumentTypeEnum
  isMandatory    Boolean          @default(false)
  createdAt      DateTime         @default(now()) @db.DateTime(0)
  updatedAt      DateTime         @updatedAt
  mortgage       Mortgage?        @relation(fields: [mortgageId], references: [id])
  mortgageId     Int?
  // Comment        Comment?         @relation(fields: [commentId], references: [id])
  commentId      Int?
  Property       Property?        @relation(fields: [propertyId], references: [id])
  propertyId     Int?
  Comment        Comment?         @relation(fields: [commentId], references: [id])
}

enum MortgageStatusEnum {
  SUBMITTED
  UNDER_DOCUMENTATION_STAGE
  SUBMITTED_TO_BANK
  APPROVED
  VALUATION_STAGE
  FINAL_OFFER_LETTER
  CASE_DISBURSED
  PROPERTY_TRANSFER
  TRANSACTION_COMPLETED
  CASE_CLOSED
  CASE_DECLINED
}

enum LoanTypeEnum {
  BUY_PROPERTY_FROM_SELLER
  BUY_PROPERTY_FROM_DEVELOPER
  SHIFT_PROPERTY_LOAN
  GET_CASH_AGAINST_EXISTING_PROPERTY
}

model Mortgage {
  id               Int      @id @default(autoincrement())
  firstName        String   @db.VarChar(255)
  lastName         String   @db.VarChar(255)
  email            String   @db.VarChar(255)
  phoneNumber      String?  @db.VarChar(255)
  dateOfBirth      DateTime @db.DateTime(0)
  intendedProperty String   @db.VarChar(255)
  monthlyIncome    Float
  valueOfProperty  Float    @default(0)
  createdAt        DateTime @default(now()) @db.DateTime(0)
  updatedAt        DateTime @updatedAt
  country          String?  @default("") @db.VarChar(255)

  status        MortgageStatusEnum
  residenceType ResidenceTypeEnum
  incomeProfile IncomeProfileEnum
  loanType      LoanTypeEnum

  documents Document[]
  userId    Int?
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "mortgage_userId_foreign_idx")

  comments             Comment[]
  mortgageTransactions MortgageTransaction[]

  @@index([userId], map: "Mortgages_userId_foreign_idx")
}

enum PropertyTypeEnum {
  RESIDENTIAL
  COMMERCIAL
}

enum CompletionStatusEnum {
  COMPLETED
  UNDER_CONSTRUCTION
}

enum FinanceTypeEnum {
  ISLAMIC
  CONVENTIONAL
}

enum EmirateEnum {
  DUBAI
  ABU_DHABI
  RAS_AL_KHAIMAH
  SHARJAH
  FUJAIRAH
  AJMAN
  UMM_AL_QUWAIN
}

model MortgageTransaction {
  id                  Int      @id @default(autoincrement())
  additionalDetail    String?  @db.Text
  customerInformation String?  @db.Text
  createdAt           DateTime @default(now()) @db.DateTime(0)
  updatedAt           DateTime @updatedAt

  financeType      FinanceTypeEnum?
  emirate          EmirateEnum?
  propertyType     PropertyTypeEnum?
  completionStatus CompletionStatusEnum?
  loanType         LoanTypeEnum?

  mortgageId Int
  mortgage   Mortgage @relation(fields: [mortgageId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "MortgageTransactions_mortgageId_foreign_idx")

  @@index([mortgageId], map: "MortgageTransactions_mortgageId_foreign_idx")
}

model Comment {
  id          Int        @id @default(autoincrement())
  userId      Int
  mortgageId  Int
  message     String     @db.Text
  createdAt   DateTime   @default(now()) @db.DateTime(0)
  updatedAt   DateTime   @updatedAt
  attachments Document[]
  user        User       @relation(fields: [userId], references: [id])
  mortgage    Mortgage   @relation(fields: [mortgageId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "MortgageComments_ibfk_2")

  @@index([mortgageId], map: "mortgageId")
  @@index([userId], map: "userId")
}

enum UserRoleEnum {
  admin
  advertiser
  agent
}

model User {
  id               Int           @id @default(autoincrement())
  firstName        String        @db.VarChar(255)
  lastName         String        @db.VarChar(255)
  email            String        @unique(map: "email") @db.VarChar(255)
  password         String        @db.VarChar(255)
  createdAt        DateTime      @default(now()) @db.DateTime(0)
  updatedAt        DateTime      @updatedAt
  role             UserRoleEnum? @default(advertiser)
  agentId          Int?
  isEmailConfirmed Boolean?
  mortgage         Mortgage[]
  comments         Comment[]
  properties       Property[]
  agent            Agent[]
}

enum PropertiesStatusEnum {
  SALE
  RENT
}

enum ProjectStatusEnum {
  OFF_PLAN_UNDER_CONSTRUCTION
  SHELL_AND_CORE
  VACANT
  RENTED
}

model Location {
  id         Int          @id @default(autoincrement())
  name       String?      @unique(map: "name") @db.VarChar(255)
  createdAt  DateTime     @db.DateTime(0)
  updatedAt  DateTime     @db.DateTime(0)
  emirate    EmirateEnum?
  properties Property[]
  agents     Agent[]
}

enum AmenityTypeEnum {
  PROPERTY
  BUILDING
  COMMUNITY
}

model Amenity {
  id         Int              @id @default(autoincrement())
  name       String?          @unique(map: "name") @db.VarChar(255)
  createdAt  DateTime         @db.DateTime(0)
  updatedAt  DateTime         @db.DateTime(0)
  type       AmenityTypeEnum?
  property   Property?        @relation(fields: [propertyId], references: [id])
  propertyId Int?
}

model PropertyTypeCategory {
  id        Int              @id @default(autoincrement())
  name      String           @unique(map: "name") @db.VarChar(255)
  type      PropertyTypeEnum
  createdAt DateTime         @db.DateTime(0)
  updatedAt DateTime         @db.DateTime(0)

  properties Property[]
}

model PropertyPhotos {
  id         Int      @id @default(autoincrement())
  propertyId Int
  name       String   @db.VarChar(255)
  path       String   @unique(map: "path") @db.VarChar(255)
  createdAt  DateTime @db.DateTime(0)
  updatedAt  DateTime @db.DateTime(0)
  property   Property @relation(fields: [propertyId], references: [id])

  @@index([propertyId], map: "propertyId")
}

model Property {
  id                                     Int       @id @default(autoincrement())
  name                                   String    @db.VarChar(255)
  description                            String?   @db.Text
  phone                                  String    @db.VarChar(255)
  amount                                 Float
  size                                   Float?
  numberOfBedRooms                       Int?
  numberOfBathRooms                      Int?
  maintenanceFee                         Float?
  address                                String?   @db.VarChar(255)
  landmark                               String?   @db.Text
  createdAt                              DateTime  @db.DateTime(0)
  updatedAt                              DateTime  @updatedAt
  completionDate                         DateTime? @db.DateTime(0)
  minimumContract                        Float?
  noticePeriod                           Float?
  deedNumber                             String?   @db.VarChar(255)
  unitNumber                             Int?
  buildingName                           String?   @db.VarChar(255)
  floor                                  Int?
  isApproved                             Boolean?
  draft                                  String?   @db.Text
  agentInfoId                            Int?
  paymentInterval                        String?   @db.VarChar(255)
  emirateId                              Int
  numberOfCheques                        Int?
  noticePeriodOfRemainingRentalAgreement Int?
  numberOfLavatory                       Int?
  rentalAmount                           Float?
  trakheesiPermitNo                      String?   @default("") @db.VarChar(255)
  lat                                    Float?    @db.Float
  lng                                    Float?    @db.Float

  projectStatus ProjectStatusEnum?
  status        PropertiesStatusEnum? @default(SALE)
  propertyType  PropertyTypeEnum?
  emirate       EmirateEnum?

  propertyTypeCategoryId Int
  propertyTypeCategory   PropertyTypeCategory @relation(fields: [propertyTypeCategoryId], references: [id])


  locationId Int?
  location   Location? @relation(fields: [locationId], references: [id])

  userId Int?
  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Properties_userId_foreign_idx")

  agentId Int?
  agent   Agent? @relation(fields: [agentId], references: [id])

  documents Document[]
  amenities Amenity[]
  propertyPhotos PropertyPhotos[]
}

model Agent {
  id                        Int        @id @default(autoincrement())
  userId                    Int
  agency                    String?    @db.VarChar(255)
  contactNumber             String?    @db.VarChar(255)
  locationId                Int
  realEstateLicenseFilePath String     @unique(map: "realEstateLicenseFilePath") @db.VarChar(255)
  isActive                  Boolean?
  isApproved                Boolean?
  createdAt                 DateTime   @db.DateTime(0)
  updatedAt                 DateTime   @db.DateTime(0)
  user                      User       @relation(fields: [userId], references: [id])
  properties                Property[]
  location                  Location   @relation(fields: [locationId], references: [id])

  @@index([locationId], map: "locationId")
  @@index([userId], map: "userId")
}

model Inqueries {
  id        Int      @id @default(autoincrement())
  firstName String   @db.VarChar(255)
  lastName  String   @db.VarChar(255)
  budget    Int
  website   String   @db.VarChar(255)
  message   String   @db.Text
  createdAt DateTime @db.DateTime(0)
  updatedAt DateTime @db.DateTime(0)
}
